
require("dotenv").config();

//FrameWork
const express = require("express");
const mongoose = require("mongoose");

// Database
const database = require("./database/index");

//Models
const BookModel = require("./database/book");
const AuthorModel = require("./database/author");
const PublicationModel = require("./database/publication");

//Initilizing microservices routes
const Books = require("./API/Book");
const Authors = require(".API/Author");
const Publications = require("./API/Publication");

//Initializing express
const shapeAI = express();

//Configurations 
shapeAI.use(express.json());

mongoose.connect(process.env.MONGO_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useFindAndModify: false,
    useCreateIndex: true
}).then(() => console.log("Connection established!!!!!"));

// Initilazing Microservices
shapeAI.use("/book",Books);
shapeAI.use("/author",Author);
shapeAI.use("/publication",Publication);

shapeAI.listen(3000, () => console.log("The server is running"));



/*
Route           /
Description     To get all the books
Access          PUBLIC
Parameters      NONE
Method          Get
*/

// shapeAI.get("/",(req,res)=>{
//     return res.json({books:database.books});
// });

shapeAI.get("/",async(req,res)=>{
    const getAllBooks = await BookModel.find();
    return res.json({books:getAllBooks});
});

/*
Route           /is
Description     get specefic book from database based on isbn
Access          PUBLIC
Parameters      isbn
Method          Get
*/

// shapeAI.get("/is/:isbn",(req,res)=>{
    
//     const getSpeceficBook = database.books.filter((book) => book.ISBN === req.params.isbn);

//     if(getSpeceficBook.length === 0){
//         return res.json({error : `No book found for the ISBN of ${req.params.isbn}`});
//     } 
//     return res.json({book:getSpeceficBook});
// });

shapeAI.get("/is/:isbn",async(req,res)=>{
    const getSpeceficBook  = await BookModel.findOne({ISBN: req.params.isbn});

    if(!getSpeceficBook){
        return res.json({error : `No book found for the ISBN of ${req.params.isbn}`});
    } 

    return res.json({book:getSpeceficBook});
});

/*
Route           /c
Description     get specefic book basd on a category
Access          PUBLIC
Parameters      category
Method          Get
*/

// shapeAI.get("/c/:category", (req, res)=> {

//     const getSpeceficBooks = database.books.filter(
//         (book) => book.category.includes(req.params.category)
//     );

//     if(getSpeceficBooks.length === 0){
//         return res.json({error:`No book found for the category of ${req.params.category}`});
//     }
//     return res.json({book:getSpeceficBooks});
// });

shapeAI.get("/c/:category", async(req, res)=> {
    const getSpeceficBooks = await BookModel.find({category: req.params.category});

    if(!getSpeceficBooks){
        return res.json({error:`No book found for the category of ${req.params.category}`});
    }

    return res.json({book:getSpeceficBooks});
});

/*
Route           /a
Description     get specefic book basd on a authors
Access          PUBLIC
Parameters      category
Method          Get
*/

// shapeAI.get("/a/:authors", (req, res)=> {
//     const getSpeceficBooks = database.books.filter(
//         (book) => book.authors.includes(parseInt(req.params.authors))
//     );

//     if(getSpeceficBooks.length === 0){
//         return res.json({error:`No book found for the category of ${req.params.authors}`});
//     }

//     return res.json({book:getSpeceficBooks});
// });

shapeAI.get("/a/:authors", async(req, res) => {
    const getSpeceficBooks =await BookModel.findOne({authors:req.params.authors});

    if(!getSpeceficBooks){
        return res.json({error:`No book found for the category of ${req.params.authors}`});
    }

    return res.json({book:getSpeceficBooks});
});

// ---------------------------------------------------------------------------------

/*
Route           /author
Description     get all authors
Access          PUBLIC
Parameters      NONE
Method          Get
*/

// shapeAI.get("/author", (req,res) => {
//     return res.json({authors: database.authors});
// });

shapeAI.get("/author", async(req,res) => {
    const getAllAuthors = await AuthorModel.find();
    return res.json({authors: getAllAuthors});
});

/*
Route           /author/:id
Description     get specefic author
Access          PUBLIC
Parameters      id
Method          Get
*/

// shapeAI.get("/author/i/:id",(req,res)=>{
//     const getSpeceficAuthor = database.authors.filter((author) => author.ID === parseInt(req.params.id));

//     if(getSpeceficAuthor.length == 0){
//         return res.json({error : `No author found for the id of ${req.params.id}`});
//     } 

//     return res.json({book:getSpeceficAuthor});
// });

shapeAI.get("/author/i/:id",async(req,res)=>{
    const getSpeceficAuthor = await AuthorModel.findOne({ID: req.params.id});

    if(!getSpeceficAuthor){
        return res.json({error : `No author found for the id of ${req.params.id}`});
    } 

    return res.json({book:getSpeceficAuthor});
});

/*
Route           /author/:isbn
Description     to get a list of authors based on a book's ISBN.
Access          PUBLIC
Parameters      isbn
Method          Get
*/

// shapeAI.get("/author/is/:isbn",(req,res) => {
//     const getSpeceficAuthors = database.authors.filter((author) => author.books.includes(req.params.isbn));

//     if(getSpeceficAuthors.length === 0){
//         return res.json({error : `No author found for the book ${req.params.isbn}`});
//     }

//     return res.json({authors : getSpeceficAuthors});
// });

shapeAI.get("/author/is/:isbn",async(req,res) => {
    const getSpeceficAuthors = await AuthorModel.findOne({books:req.params.isbn});

    if(!getSpeceficAuthors){
        return res.json({error : `No author found for the book ${req.params.isbn}`});
    }

    return res.json({authors : getSpeceficAuthors});
});

/*
Route           /pub
Description     get all publications
Access          PUBLIC
Parameters      isbn 
Method          Get
*/

shapeAI.get("/pub",(req,res) => {
    return res.json({Publications:database.publications});
});



/*
Route           /pub//i/:id
Description     get specefic publication based on id
Access          PUBLIC
Parameters      id 
Method          Get
*/

// shapeAI.get("/pub/i/:id",(req,res) => {
//     const getSpeceficPublication = database.publications.filter(
//         (publication) => publication.ID === parseInt(req.params.id));

//     if(getSpeceficPublication.length === 0){
//         return res.json({Error: `No publication found for the book ${req.params.id}`});
//     }

//     return res.json({Publications: getSpeceficPublication});
// });

shapeAI.get("/pub/i/:id",async(req,res) => {
    const getSpeceficPublication = await PublicationModel.findOne({ID:req.params.id});
      

    if(!getSpeceficPublication){
        return res.json({Error: `No publication found for the book ${req.params.id}`});
    }

    return res.json({Publications: getSpeceficPublication});
});

/*
Route           /pub/is/:isbn
Description     to get a list of publications based on a book.     
Access          PUBLIC
Parameters      isbn
Method          Get
*/

// shapeAI.get("/pub/is/:isbn",(req,res) => {
//     const getSpeceficPublications = database.publications.filter(
//         (publication) => publication.books.includes(req.params.isbn));

//     if(getSpeceficPublications.length === 0){
//         return res.json({Error: `No publication found for the book ${req.params.isbn}`});
//     }

//     return res.json({Publications : getSpeceficPublications});
// });

shapeAI.get("/pub/is/:isbn",async(req,res) => {
    const getSpeceficPublications = await PublicationModel.find({books:req.params.isbn});

    if(!getSpeceficPublications){
        return res.json({Error: `No publication found for the book ${req.params.isbn}`});
    }

    return res.json({Publications : getSpeceficPublications});
});

/*
Route           /book/new
Description     add new book
Access          PUBLIC
Parameters      NONE
Method          post
*/

// shapeAI.post("/book/new",(req,res)=>{
//     const {newBook} = req.body;

//     database.books.push(newBook);

//     return res.json({books:database.books, message:"Book was added"});
// });

shapeAI.post("/book/new", async (req, res) => {
    const { newBook } = req.body;
  
   const addNewBook = BookModel.create(newBook);
  
    return res.json({book:addNewBook, message: "book was added!" });
});


/*
Route           /authors/new
Description     add new author
Access          PUBLIC
Parameters      NONE
Method          post
*/

// shapeAI.post("/author/new",(req,res)=>{
//     const {newAuthor} = req.body;

//     database.authors.push(newAuthor);

//     return res.json({authors:database.authors, message:"Author was added"});
// });

shapeAI.post("/author/new", (req, res) => {
    const { newAuthor } = req.body;
  
    AuthorModel.create(newAuthor);
  
    return res.json({ message: "author was added!" });
});

/*
Route           /publication/new
Description     add new publication
Access          PUBLIC
Parameters      NONE
Method          post
*/

// shapeAI.post("/publication/new",(req,res) => {
//     const {newPublication} = req.body;

//     database.publications.push(newPublication);

//     return res.json({Publication:database.publications,message:"Publication was added"});
// });

shapeAI.post("/publication/new",(req,res) => {
    const {newPublication} = req.body;

    PublicationModel.create(newPublication);

    return res.json({message:"Publication was added"});
});


/*
Route           /book/update/:title
Description     Update title of a book
Access          PUBLIC
Parameters      isbn
Method          put
*/

// shapeAI.put("/book/update/:isbn", (req,res) => {
//     // For each directly modifies the array

//     database.books.forEach((book) => {
//         if(book.ISBN === req.params.isbn){
//             book.title = req.body.bookTitle;
//             return;
//         }
//     });

//     return res.json({books:database.books});
// });

shapeAI.put("/book/update/:isbn", async(req,res) => {

    const updatedBook = await BookModel.findOneAndUpdate(
        {
            ISBN: req.params.isbn,
        },
        {
            title: req.body.bookTitle,
        },
        {
            new: true, // To get updated one
        },
        );
    return res.json({books:updatedBook});
});

/*
Route           /book/author/update/:isbn
Description     Update/add new author
Access          PUBLIC
Parameters      isbn
Method          put
*/

// shapeAI.put("/book/author/update/:isbn", (req,res) => {
//     //Update the book database

//     database.books.forEach((book) => {
//         if(book.ISBN === req.params.isbn) 
//         return book.authors.push(req.body.newAuthor);
//     });  

//     //Update the author database

//     database.authors.forEach((author) => {
//         if(author.ID === req.body.newAuthor)
//         return author.book.push(req.body.isbn);
//     });

//     return res.json({books: database.books, authors:database.authors,message:"New author was added"});
// });

shapeAI.put("/book/author/update/:isbn", async(req,res) => {
    //Update the book database

    const updatedBook = await BookModel.findOneAndUpdate(
        {
            ISBN: req.params.isbn
        },
        {
            $push:{
                authors :req.body.newAuthor,
            },
        },
        {
            new: true,
        }
    );
        
    //Update the author database
    const upadatedAuthor = await AuthorModel.findOneAndUpdate(
        {
            ID: req.body.newAuthor,
        },
        {
            $addToSet:{
                books :req.params.isbn
            }
        },
        {
            new:true,
        },
    );
    
    return res.json({books: updatedBook, authors:upadatedAuthor,message:"New author was added"});
});

/*
Route           /author/update/:id
Description     update Author name using id 
Access          PUBLIC
Parameters      id
Method          put
*/

// shapeAI.put("/author/update/:id", (req,res) => {
//     // For each directly modifies the array

//     database.authors.forEach((author) => {
//         if(author.ID === parseInt(req.params.id)){
//             author.name = req.body.authorName;
//             return;
//         }
//     });

//     return res.json({authors:database.authors});
// });

shapeAI.put("/author/update/:id", async (req,res) => {
    const updatedAuthor = await AuthorModel.findOneAndUpdate(
        {
            ID : req.params.id
        },
        {
            name:req.body.authorName
        },
        {
            new:true
        }
    );

    return res.json({authors:updatedAuthor});
});

/*
Route           /publication/update/:id
Description     update publication name using id 
Access          PUBLIC
Parameters      id
Method          put
*/


// shapeAI.put("/publication/update/:id", (req,res) => {
//     // For each directly modifies the array

//     database.publications.forEach((publication) => {
//         if(publication.ID === parseInt(req.params.id)){
//             publication.name = req.body.publicationName;
//             return;
//         }
//     });

//     return res.json({publications:database.publications});
// });

shapeAI.put("/publication/update/:id", async (req,res) => {
    const updatedPublication = await PublicationModel.findOneAndUpdate(
        {
            ID : req.params.id
        },
        {
            name:req.body.publicationName
        },
        {
            new:true
        }
    );

    return res.json({authors:updatedPublication});
});

/*
Route           /publication/update/book
Description     Update/add new book to a publication
Access          PUBLIC
Parameters      isbn
Method          put
*/


// shapeAI.put("/publication/update/book/:isbn", (req, res) => {
//     // update the publication database
//     database.publications.forEach((publication) => {
//       if (publication.ID === req.body.pubId) {
//         return publication.books.push(req.params.isbn);
//       }
//     });
  
//     // update the book database
//     database.books.forEach((book) => {
//       if (book.ISBN === req.params.isbn) {
//         book.publication = req.body.pubId;
//         return;
//       }
//     });
  
//     return res.json({
//       books: database.books,
//       publications: database.publications,
//       message: "Successfully updated publication",
//     });
// });

shapeAI.put("/publication/update/book/:isbn", (req, res) => {
    // update the publication database
    
  
    // update the book database
    
  
    return res.json({
      books: database.books,
      publications: database.publications,
      message: "Successfully updated publication",
    });
});

/*
Route           /book/delete
Description     delete a book
Access          PUBLIC
Parameters      isbn
Method          delete
*/
 
// shapeAI.delete("/book/delete/:isbn",(req,res) => {
//     const updatedBookDatabase = database.books.filter(
//         (book) => book.ISBN !== req.params.isbn 
//     ); 

//     database.books = updatedBookDatabase;
//     return res.json({books:database.books});
// });

shapeAI.delete("/book/delete/:isbn",async(req,res) => {
    const updatedBook = await BookModel.findOneAndDelete({ISBN: req.params.isbn}); 
    return res.json({books:updatedBook});
});

/*
Route          /book/delete/author
Description     delete a author from a book
Access          PUBLIC
Parameters      isbn,authot id;
Method          delete
*/

// shapeAI.delete("book/delete/author/:isbn/:authorID",(req,res) => {
//     // Update the book database
//     database.books.forEach((book) => {
//         if(book.ISBN === req.params.isbn){
//             const newAuthorList = book.authors.filter(
//                 (author) => author !== parseInt(req.params.authorID)
//             );
//             book.authors = newAuthorList;
//             return; 
//         } 
//     }); the author database
//     database.authors.forEach((author) => {
//         if(author.ID  === parseInt(req.params.authorID)){
//             const newBooksList  = author.books.filter((book) => book !== req.params.isbn);
//             author.books = newBooksList;
//             return;
//         }    
//     });

//     return res.json({
//         books: database.books,
//         author: database.authors,
//         message:"Author was dleted",
//     });
// });

shapeAI.delete("book/delete/author/:isbn/:authorID",async(req,res) => {
    // Update the book database
    const updatedBook = await BookModel.findOneAndUpdate(
        {
            ISBN:req.params.isbn
        },
        {
            $pull:
            {
                authors:parseInt(req.params.authorID)
            },
        },
        {
            new:true
        }
    );

    //udate the author database
    const updatedAuthor = await AuthorModel.findByIdAndUpdate(
        {
            ID : parseInt(rq.params.authorID)
        },
        {
            $pull:{
                books:req.params.isbn
            }
        },
        {
            new:true
        }
    );

    return res.json({
        books: updatedBook,
        author: updatedAuthor,
        message:"Author was dleted",
    });
});

//     //udate

/*
Route           /author/delete
Description     delete a author
Access          PUBLIC
Parameters      id
Method          delete
*/

// shapeAI.delete("/author/delete/:id",(req,res) => {
//     const updatedAuthorDatabase = database.authors.filter(
//         (author) => author.ID !== parseInt(req.params.id)
//     ); 

//     database.authors = updatedAuthorDatabase;
//     return res.json({authors:database.authors});
// });

shapeAI.delete("/author/delete/:id",async(req,res) => {
    const updatedAuthor = await AuthorModel.findOneAndDelete({ID: req.params.id}); 
    return res.json({books:updatedAuthor});
});

/*
Route           /publication/delete/book
Description     delete a book from publication 
Access          PUBLIC
Parameters      isbn, publication id
Method          DELETE
*/
// shapeAI.delete("/publication/delete/book/:isbn/:pubId", (req, res) => {
//     // update publication database
//     database.publications.forEach((publication) => {
//       if (publication.ID === parseInt(req.params.pubId)) {
//         const newBooksList = publication.books.filter(
//           (book) => book !== req.params.isbn
//         );
  
//         publication.books = newBooksList;
//         return;
//       }
//     });
  
//     // update book database
//     database.books.forEach((book) => {
//       if (book.ISBN === req.params.isbn) {
//         book.publication = 0; // no publication available
//         return;
//       }
//     });
  
//     return res.json({
//       books: database.books,
//       publications: database.publications,
//     });
//   });

shapeAI.delete("book/delete/publication/:isbn/:publicationID",async(req,res) => {
    // Update the book database
    const updatedBook = await BookModel.findOneAndUpdate(
        {
            ISBN:req.params.isbn
        },
        {
            $pull:
            {
                publication:parseInt(req.params.publicationID)
            },
        },
        {
            new:true
        }
    );

    //udate the publication database
    const updatedPublication = await AuthorModel.findByIdAndUpdate(
        {
            ID : parseInt(rq.params.publicationID)
        },
        {
            $pull:{
                books:req.params.isbn
            }
        },
        {
            new:true
        }
    );

    return res.json({
        message:"Publication was dleted",
        books: updatedBook,
        author: updatedPublication,
    });
});

/*
Route           /publication/delete
Description     delete a publication
Access          PUBLIC
Parameters      id
Method          delete
*/

// shapeAI.delete("/publication/delete/:id",(req,res) => {
//     const updatedPublicationDatabase = database.publications.filter(
//         (publication) => publication.ID !== parseInt(req.params.id)
//     ); 

//     database.publications = updatedPublicationDatabase;
//     return res.json({publications:database.publications});
// });

shapeAI.delete("/publication/delete/:isbn",async(req,res) => {
    const updatedPublication = await PublicationModel.findOneAndDelete({ID: req.params.id}); 
    return res.json({books:updatedPublication});
});
